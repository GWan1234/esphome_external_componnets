# max30105接入esphome（自定义external component）

## max0105原理

- max30105是一个集成了红外线LED、红光LED和光电二极管的传感器模块，主要用于测量心率和血氧饱和度（SpO2）。它通过发射光线并检测反射回来的光线强度来计算这些生理参数。
- 也可以根据反射的光强计算烟雾浓度

## 接线

max30105通常有5个引脚：VIN、GND、SCL、SDA和INT。以下是它们的功能：
- VIN：电源输入，通常连接到3.3V电源。
- GND：地线，连接到系统的地。
- SCL：I2C时钟线，连接到esp32的SCL引脚。
- SDA：I2C数据线，连接到esp32的SDA引脚。
- INT：中断引脚，这个驱动实现了中断功能，可以连接到esp32的一个具有 **上拉电阻** 数字引脚（可选），
如果不连接这个则无法读取温度等就绪信号。

## 参考esphome配置

```yaml
substitutions:
  name: "smoke-sensor-pro"
  location: "kitchen"

esphome:
  name: "${name}"
  name_add_mac_suffix: true
  friendly_name: "${location} smoke sensor pro"
  comment: smoke-sensor-pro
  project:
    name: synodriver.csmoke-sensor-pro
    version: "0.0.1"
preferences:
  flash_write_interval: 10min
esp8266:
  board: nodemcuv2

# Enable logging
logger:

# Enable Home Assistant API
api:
  actions:
    - action: set_led_current
      variables:
        red_current: int
        ir_current: int
        green_current: int
        pilot_current: int
      then:
        - max30105.set_led_current:
            id: max30105_1
            red_current: !lambda 'return red_current;'
            ir_current: !lambda 'return ir_current;'
            green_current: !lambda 'return green_current;'
            pilot_current: !lambda 'return pilot_current;'
    - action: enable_interrupts
      variables:
        fifo_almost_full: bool
        data_ready: bool
        alc_overflow: bool
        prox_int: bool
        temp_ready: bool
      then:
        - max30105.enable_interrupts:
            id: max30105_1
            fifo_almost_full: !lambda "return fifo_almost_full;"
            data_ready: !lambda "return data_ready;"
            alc_overflow: !lambda "return alc_overflow;"
            prox_int: !lambda "return prox_int;"
            temp_ready: !lambda "return temp_ready;"
  on_client_connected:
    - logger.log:
        format: "Client %s connected to API with IP %s"
        args: ["client_info.c_str()", "client_address.c_str()"]

ota:
  - platform: esphome
wifi:
  ssid: ! wifi_ssid
  password: ! wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    password: ""
  #use_address: 192.168.5.240
captive_portal:

web_server:
  port: 80

external_components:
  - source:
#      type: local
#      path: components
      type: git
      url: https://github.com/synodriver/esphome_external_componnets

i2c:
  sda: D2
  scl: D1
  scan: true
  id: i2cbus

max30105:
  id: "max30105_1"
  i2c_id: i2cbus
  fifo_almost_full: true # 启用fifo队列几乎满中断
  alc_overflow: true # 启用自然光过大干扰中断
  prox_int: false # 启用接近检测中断
  temp_ready: true # 启用温度数据就绪中断
  data_ready: true # 启用光强数据就绪中断
  red_current: 0x24 # 红色led驱动电流
  ir_current: 0x24 # 红外led驱动电流
  green_current: 0x24 # 绿色led驱动电流 参考数据手册21页 00是0mA（关闭） FF是50mA 非线性的
  update_interval: 5s

  interrupt_pin: D7 # 确保他有上拉电阻，因为下降沿触发中断
  on_temperature_ready:
    - logger.log:
        format: "sensor temperature ready %f"
        args: ["temperature"]
  on_fifo_almost_full:
    - logger.log:
        format: "sensor fifo full %f"
        args: []
#  on_power_ready
#  on_data_ready
#  on_alc_overflow
#  on_prox_int 都可以类似写 这些由中断触发，需要连接中断引脚

# binary_sensor功能其实和上面的automation有点重复，但可以直接在home assistant里看到状态
binary_sensor:
  - platform: max30105
    max30105_id: "max30105_1"
    alc_overflow:
      name: "alc overflow"
      entity_category: "diagnostic"
    power_ready:
      name: "power ready"
      entity_category: "diagnostic"
    fifo_full:
      name: "fifo full"
      entity_category: "diagnostic"


sensor:
  - platform: max30105
    internal_temperature:
      name: "die temperature"
    led1:
      name: "red led"
    led2:
      name: "ir led"
    led3:
      name: "green led"
    max30105_id: "max30105_1"

  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "${name} WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "${name} WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"

button:
  - platform: template
    name: "reset sensor"
    id: button1
    entity_category: "diagnostic"
    on_press:
      - max30105.reset:
          id: max30105_1

  - platform: template
    name: "shutdown sensor"
    id: button2
    entity_category: "diagnostic"
    on_press:
      - max30105.shutdown:
          id: max30105_1

  - platform: template
    name: "wakeup sensor"
    id: button3
    entity_category: "diagnostic"
    on_press:
      - max30105.wakeup:
          id: max30105_1

  - platform: template # debug用，模拟发生了一次中断
    name: "simulate interrupt"
    id: button8
    entity_category: "diagnostic"
    on_press:
      - max30105.simulate_interrupt:
          id: max30105_1


time:
  - platform: sntp
    id: my_time

switch:
  - platform: restart
    name: "${name} controller Restart"
  - platform: factory_reset
    name: Restart with Factory Default Settings
    disabled_by_default: true

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${name} IP Address
    ssid:
      name: ${name} Connected SSID
    bssid:
      name: ${name} Connected BSSID
    mac_address:
      name: ${name} Mac Wifi Address
    # scan_results:
    #   name: ${name} Latest Scan Results
    dns_address:
      name: ${name} DNS Address
  - platform: version
    name: "ESPHome Version"
```
